// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// BaseComposeRequest defines model for BaseComposeRequest.
type BaseComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   *string         `json:"distribution,omitempty"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeBootcRequest defines model for ComposeBootcRequest.
type ComposeBootcRequest struct {
	// Embedded struct due to allOf(#/components/schemas/BaseComposeRequest)
	BaseComposeRequest `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageRef      string              `json:"image_ref"`
	ImageRequest  *ImageRequestBase   `json:"image_request,omitempty"`
	ImageRequests *[]ImageRequestBase `json:"image_requests,omitempty"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	// Embedded struct due to allOf(#/components/schemas/BaseComposeRequest)
	BaseComposeRequest `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Blueprint     *Blueprint      `json:"blueprint,omitempty"`
	ImageRequest  *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests *[]ImageRequest `json:"image_requests,omitempty"`
	Koji          *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ImageRequestBase)
	ImageRequestBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Repositories []Repository `json:"repositories"`
}

// ImageRequestBase defines model for ImageRequestBase.
type ImageRequestBase struct {
	Architecture string     `json:"architecture"`
	ImageType    ImageTypes `json:"image_type"`
	Ostree       *OSTree    `json:"ostree,omitempty"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostBootcComposeJSONBody defines parameters for PostBootcCompose.
type PostBootcComposeJSONBody ComposeBootcRequest

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostBootcComposeJSONRequestBody defines body for PostBootcCompose for application/json ContentType.
type PostBootcComposeJSONRequestBody PostBootcComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Create compose with bootc image
	// (POST /experimental/compose)
	PostBootcCompose(ctx echo.Context) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// PostBootcCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostBootcCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBootcCompose(ctx)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.POST(baseURL+"/experimental/compose", wrapper.PostBootcCompose)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
