// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsBootc ImageTypes = "aws-bootc"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesGuestImageBootc ImageTypes = "guest-image-bootc"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`
	ProfileId     string                 `json:"profile_id"`
	Tailoring     *OpenSCAPTailoring     `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageRef     *string      `json:"image_ref,omitempty"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`
	ProfileId     string                 `json:"profile_id"`
	Tailoring     *OpenSCAPTailoring     `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3wZO5fNhcxw+l8/Fa8m6Oq2+wbD85vNWuHd6FqDR+Prm7s3rk+lX8Tp9HjL6gNHxNJg8O+PbiSDkslly",
	"ukdh6eyhx57Kjap/dN/bbVuD3frIOj3uHQ8vRx4ZnZT6pDy8r7fuYKNcP629vZZHYoBq43Pr5jO9uQ7P",
	"Dx74aXdcLt+fPLWmNyicfmruWvelpyP3cndU6z6cv/bJDuo8O1N8eV2eeJWnk8O7cyv0JiO+1/oUeiOn",
	"QnuDOq+9+8/jm/LuCe29Pdarr/C88dj9dOU+I9QnzZ3yZ/rgDqzKedD99Dp8pq+cHYnn5s3g/vnT0/i4",
	"eRcw+7HFXk8HZ6PqWXB33nrruW/8tsUP3JNKn5QvwrfqI7w8KDvVTuPGurTPStbXV1puWhZ7Pfgc4rdH",
	"hhs43Lv8HDS/9krD7vuVz+2OQ5qlr8/nfYKbt6E3DHd3w6/uY2kiqgNBsHDu+NdX9+0yfH26rz8P6u5I",
	"HDfd8/vS58+79epX96JxPmndtW5bB30iDo9Pnh/vxpZ/5JwfXlbOu63ms/8wGtTO3IveZeXi88EUPlZc",
	"i3it6Ll1ejaG/sOr3W6M+8TyrU/49uz64ODyoN1q1Y/x0RE63fGZe3y6Gz7w24vLy2r5qWE9u+TtqXnc",
	"8hUPtU8mzeP2ZNTpk4NJ5+T4lp61W7x9cPDUbk2O2qfOUfu43mq1ndHtrPenq6dWaffgKXC8abf1/HTq",
	"vk7P3T4pfRruvN8MH8aD02r56Gtt1Nm9Pj64KpOLz58O7it+OO5++toLu7XHC3ZQ82snoSeC87ujs/ML",
	"4TeODvukwk7eP7dorzIN9p46zYvWoX3Zbl9PX1uvnD7eN3ef7sP2p9KAvLIeuqte3F23h9Ob9u7O416z",
	"ga8f+sRvdD8N+O3hZLddvWCe3bqsXx6GdPpc6WJxAp/r57cXD+JT7whW6pg/dU/ar+909+ap+VA7ux41",
	"yn3ifH10mtWr0sCvHr13d3vN2uPR4aDijV/rHW/85nS+niOnUnn//PTms6fu89lZezh+H37yrro74Ztz",
	"2ievb6Wz8tR7rl7gwQnbOWm1ptd794+s9dyddC/LR9Zrrzk5apO3UfcwnH71HycP46uDz+FR56F5jWpP",
	"fXKJ7yvDs6smt3cPA3781rj89Nkml+S2++mUvfZuzg9r/iPzWjY56rn200Pz9XkUPLqHU14r7e2h6z5x",
	"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",
	"4DCKiCS6DygeZh2cL9/+fwAAAP//yKBAlTjAAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
